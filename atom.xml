<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>破晓月圆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://renxiaoyuan.coding.me/"/>
  <updated>2018-06-26T13:47:47.440Z</updated>
  <id>https://renxiaoyuan.coding.me/</id>
  
  <author>
    <name>破晓月圆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何学习</title>
    <link href="https://renxiaoyuan.coding.me/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%EF%BC%9F.html"/>
    <id>https://renxiaoyuan.coding.me/如何学习？.html</id>
    <published>2018-12-15T04:56:26.981Z</published>
    <updated>2018-06-26T13:47:47.440Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为一名前端如何有计划的提升自己的技术水平呢？</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作为一名前端如何有计划的提升自己的技术水平呢？&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="学习" scheme="https://renxiaoyuan.coding.me/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="技术" scheme="https://renxiaoyuan.coding.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于五年后人们生活状况的思考</title>
    <link href="https://renxiaoyuan.coding.me/%E5%85%B3%E4%BA%8E%E4%BA%94%E5%B9%B4%E5%90%8E%E7%94%9F%E6%B4%BB%E7%8A%B6%E5%86%B5%E7%9A%84%E6%80%9D%E8%80%83.html"/>
    <id>https://renxiaoyuan.coding.me/关于五年后生活状况的思考.html</id>
    <published>2018-12-15T04:56:26.979Z</published>
    <updated>2018-06-26T13:47:47.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先看下网友的观点："><a href="#首先看下网友的观点：" class="headerlink" title="首先看下网友的观点："></a>首先看下网友的观点：</h4><p>房价应该不会降，一线城市买房越来越困难！<br>看病应该会越贵，毕竟生命和健康始终重要！<br>教育投资会更多，家长都希望孩子好好学习！<br>贫富差距会更大，因为阶层之间越来越固化！<br>单身人数会增加，人的各方面压力都比较大！<br>老龄化问题严重，毕竟广场舞队伍逐渐庞大！<br>环保问题不好说，污染和雾霾不知是否好转！<br>税收应该会增加，因为政府的养老金问题多！<br>人口应该不增加，毕竟多养个孩子成本太大！<br>工作愈发不好找，智能机器人逐渐代替人力！</p><h4 id="再来谈下我的分析"><a href="#再来谈下我的分析" class="headerlink" title="再来谈下我的分析"></a>再来谈下我的分析</h4><ol><li>一线城市房价降低的可能性几乎为零，如果想要你的孩子不被社会抛弃，那你就需要提前关注准一线甚至心仪的二线城市的房子。五年前房价没跌，五年后房价也不会跌。</li><li>五年后智能设备会再次升级，只能设备逐渐普及到生活的细节处，例如，房屋的门锁，冰箱，洗衣机，电视的智能化程度会越来越高。AI和AR在生活中会更加普及，手机等智能设备会变的更加<br>便携，掌握核心技术的公司对于社会的影响会越来越大，就像头号玩家那样。</li><li>五年后国家对于互联网内容的控制会越来越全面，正能量的内容会越来越多，原创内容的价值会越来越高，中国的媒体盈利模式会像美国的大型杂志社靠近，<br>人们对于知识付费的接受程度也会变高，各种网上的订阅杂志会逐渐普及。人们对于学习型，专业型的网站需求会增长，网页的阅读效果会和APP体验效果相似，在5G和pwa技术的推动下，web将会逐渐<br>取代APP成为人们浏览和购物的首选。</li><li>以语音技术为主打的微信将会被以视频技术为主打的社交类APP取代，人们的沟通方式将会从发送语音变为发送视频，购物类的网站将会以视频为商品的主要推荐方式，用户购物体验将会变的更好，<br>个性化导购会借助AR技术实现，人们可以通过各种智能设备上的摄像头实现上网购物和社交，不需要再拿着手机在房间里走来走去了。所以你未来的定位应该是一名具有五到十年经验的服饰搭配设计师，你可以借助AR，AI和大数据为顾客提供个性化的服装建议，你的网站可以提供上千种不同的服装搭配和品牌推荐，你可以让顾客通过AR技术实时看到自己的装扮，并提供付费的VIP咨询服务。</li><li>未来的阶层固化会让财富逐渐集中到中产阶级以上，就像《饥饿游戏》中展现的那样，社会底层使用着高科技的产品，却被掌握高科技的公司剥削着。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先看下网友的观点：&quot;&gt;&lt;a href=&quot;#首先看下网友的观点：&quot; class=&quot;headerlink&quot; title=&quot;首先看下网友的观点：&quot;&gt;&lt;/a&gt;首先看下网友的观点：&lt;/h4&gt;&lt;p&gt;房价应该不会降，一线城市买房越来越困难！&lt;br&gt;看病应该会越贵，毕竟生命和健
      
    
    </summary>
    
    
      <category term="生活" scheme="https://renxiaoyuan.coding.me/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>vue每日进阶--实现一个搜索框</title>
    <link href="https://renxiaoyuan.coding.me/vue%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E7%94%A8%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E6%A1%86.html"/>
    <id>https://renxiaoyuan.coding.me/vue每日进阶--用双向数据绑定实现一个搜索框.html</id>
    <published>2018-12-15T04:56:26.977Z</published>
    <updated>2018-06-26T13:47:47.438Z</updated>
    
    <content type="html"><![CDATA[<p>在vue中最常用的就是它的双向数据绑定了，这次我们来用vue的双向数据绑定实现一个搜索框的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;value&quot;&gt;搜索</span><br><span class="line">  &lt;h2&gt;&#123;&#123;value&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      value: &apos;请输入内容&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      value:function(val, oldval)&#123;</span><br><span class="line">        console.log(val, oldval)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在vue中最常用的就是它的双向数据绑定了，这次我们来用vue的双向数据绑定实现一个搜索框的功能。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="vue" scheme="https://renxiaoyuan.coding.me/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue每日进阶--vue入门</title>
    <link href="https://renxiaoyuan.coding.me/vue%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--vue%E5%85%A5%E9%97%A8.html"/>
    <id>https://renxiaoyuan.coding.me/vue每日进阶--vue入门.html</id>
    <published>2018-12-15T04:56:26.974Z</published>
    <updated>2018-06-26T14:53:25.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-js-是什么"><a href="#vue-js-是什么" class="headerlink" title="vue.js 是什么"></a>vue.js 是什么</h3><p>vue是一套用于构建用户界面的<strong>渐进式框架</strong>，vue被设计为自底向上逐层应用。vue的核心库只关注视图层，也就是平时所说的view层，这样便于开发人员快速上手，还有利于和第三方库或者既有项目整合。</p><h3 id="vue和react相比哪个更好呢"><a href="#vue和react相比哪个更好呢" class="headerlink" title="vue和react相比哪个更好呢"></a>vue和react相比哪个更好呢</h3><h4 id="核心架构比较"><a href="#核心架构比较" class="headerlink" title="核心架构比较"></a>核心架构比较</h4><p>vue和react有许多相似之处，例如：</p><ol><li>使用了Virtual DOM</li><li>提供了了响应式（Reactive）和组件化（ComPosable）的视图组件</li><li>将注意力集中保持在核心库，将其他功能交给其他相关的库，例如：路由（vue-router）和全局状态管理（vuex）</li></ol><h4 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h4><p>直接看图比较直观：<br><img src="https://img-blog.csdn.net/20180626213205885?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>在React应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件树。<br>如要避免不必要的子组件的重渲染，你需要在所有可能的地方使用 PureComponent，或是手动实现 shouldComponentUpdate 方法。同时你可能会需要使用不可变的数据结构来使得你的组件更容易被优化。<br>在 Vue 应用中，组件的依赖是在渲染过程中自动追踪的，所以系统能精确知晓哪个组件确实需要被重渲染。你可以理解为每一个组件都已经自动获得了 shouldComponentUpdate，并且没有上述的子树问题限制。<br>Vue 的这个特点使得开发者不再需要考虑此类优化，从而能够更好地专注于应用本身。</p><h4 id="HTML和CSS"><a href="#HTML和CSS" class="headerlink" title="HTML和CSS"></a>HTML和CSS</h4><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><p>在 React 中，一切都是 JavaScript。不仅仅是 HTML 可以用 JSX 来表达，现在的潮流也越来越多地将 CSS 也纳入到 JavaScript 中来处理。<br>在 React 中，所有的组件的渲染功能都依靠 JSX。JSX 是使用 XML 语法编写 JavaScript 的一种语法糖。</p><p>使用 JSX 的渲染函数有下面这些优势：</p><p>你可以使用完整的编程语言 JavaScript 功能来构建你的视图页面。比如你可以使用临时变量、JS 自带的流程控制、以及直接引用当前 JS 作用域中的值等等。</p><p>开发工具对 JSX 的支持相比于现有可用的其他 Vue 模板还是比较先进的 (比如，linting、类型检查、编辑器的自动完成)。<br>事实上 Vue 也提供了渲染函数，甚至支持 JSX。然而，vue官方默认推荐的还是模板。任何合乎规范的 HTML 都是合法的 Vue 模板，这也带来了一些特有的优势：</p><p>对于很多习惯了 HTML 的开发者来说，模板比起 JSX 读写起来更自然。这里当然有主观偏好的成分，但如果这种区别会导致开发效率的提升，那么它就有客观的价值存在。</p><p>基于 HTML 的模板使得将已有的应用逐步迁移到 Vue 更为容易。</p><p>这也使得设计师和新人开发者更容易理解和参与到项目中。</p><p>你甚至可以使用其他模板预处理器，比如 Pug 来书写 Vue 的模板。</p><h5 id="组件作用域内的-CSS"><a href="#组件作用域内的-CSS" class="headerlink" title="组件作用域内的 CSS"></a>组件作用域内的 CSS</h5><p>除非你把组件分布在多个文件上 (例如 CSS Modules)，CSS 作用域在 React 中是通过 CSS-in-JS 的方案实现的 (比如 styled-components、glamorous 和 emotion)。这引入了一个新的面向组件的样式范例，它和普通的 CSS 撰写过程是有区别的。另外，虽然在构建时将 CSS 提取到一个单独的样式表是支持的，但 bundle 里通常还是需要一个运行时程序来让这些样式生效。当你能够利用 JavaScript 灵活处理样式的同时，也需要权衡 bundle 的尺寸和运行时的开销。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>接下来我们学习如何安装vue：</p><h4 id="直接用标签引入"><a href="#直接用标签引入" class="headerlink" title="直接用标签引入"></a>直接用<script>标签引入</h4><p>使用script标签引入时常见的有下面几种方式：第一种是下载到本地，第二种是使用CDN上的资源, 第三种是使用npm下载。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">&lt;script src=&quot;./assets/js/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">方法二：</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">方法三：</span><br><span class="line">打开cmd，执行npm install vue</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>下面是一个入门的简单例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Vue 每日进阶&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vue/2.4.2/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello Vue.js!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>在浏览中运行结果：<br><img src="https://img-blog.csdn.net/20180626213434305?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p></script></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue-js-是什么&quot;&gt;&lt;a href=&quot;#vue-js-是什么&quot; class=&quot;headerlink&quot; title=&quot;vue.js 是什么&quot;&gt;&lt;/a&gt;vue.js 是什么&lt;/h3&gt;&lt;p&gt;vue是一套用于构建用户界面的&lt;strong&gt;渐进式框架&lt;/strong&gt;，
      
    
    </summary>
    
    
      <category term="vue" scheme="https://renxiaoyuan.coding.me/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>tpshop每日进阶--了解tp5应用架构</title>
    <link href="https://renxiaoyuan.coding.me/tpshop%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BA%86%E8%A7%A3%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84.html"/>
    <id>https://renxiaoyuan.coding.me/tpshop每日进阶--了解应用架构.html</id>
    <published>2018-12-15T04:56:26.972Z</published>
    <updated>2018-06-26T13:47:47.436Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="php" scheme="https://renxiaoyuan.coding.me/tags/php/"/>
    
      <category term="thinkphp" scheme="https://renxiaoyuan.coding.me/tags/thinkphp/"/>
    
      <category term="架构" scheme="https://renxiaoyuan.coding.me/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python每日进阶--读取和写入文件</title>
    <link href="https://renxiaoyuan.coding.me/Python%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E8%AF%BB%E5%8F%96%E5%92%8C%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6.html"/>
    <id>https://renxiaoyuan.coding.me/Python每日进阶--读取和写入文件.html</id>
    <published>2018-12-15T04:56:26.969Z</published>
    <updated>2018-06-26T13:47:47.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章用来记录python中读取和写入文件的方法以及一些系统模块的使用</p></blockquote><h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><ol><li>sys模块是python程序用来请求解释器行为的接口,sys.argv: 实现从程序外部向程序传递参数</li><li>os模块提供了一种方便的使用操作系统函数的方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!coding:UTF-8</span><br><span class="line">import sys</span><br><span class="line">def operation_file(file_name):</span><br><span class="line">try:</span><br><span class="line">h_file = open(file_name)</span><br><span class="line">try:</span><br><span class="line">readlines = h_file.readlines();</span><br><span class="line">print(readlines)</span><br><span class="line">finally:</span><br><span class="line">h_file.close()</span><br><span class="line">except IOError:</span><br><span class="line">print(&quot;IOError&quot;)</span><br><span class="line">def operation_write_file(file_name, strs):</span><br><span class="line">try:</span><br><span class="line">h_file = open(file_name, &apos;w&apos;, 1)</span><br><span class="line">try: </span><br><span class="line">h_file.write(strs)</span><br><span class="line">finally:</span><br><span class="line">h_file.close()</span><br><span class="line">except IOError:</span><br><span class="line">print(&quot;IOError&quot;)</span><br><span class="line">if len(sys.argv) != 2:</span><br><span class="line">print(&quot;usage:*.py path/file_name&quot;)</span><br><span class="line">else: </span><br><span class="line">operation_file(sys.argv[1])</span><br><span class="line">print (&quot;write file:&quot;)</span><br><span class="line">strs =&quot;&quot;&quot;</span><br><span class="line">    All that city!you just couldn&apos;t see an end to it.</span><br><span class="line">    The end? please? can you please just show me where is ends?</span><br><span class="line">    ...</span><br><span class="line">    One woman,onw house,one piece of land to call your own</span><br><span class="line">    One landscape to look at,on way to die!</span><br><span class="line">    All that world just weighing down on you.</span><br><span class="line">    You don&apos;t even know where it comes to and end.</span><br><span class="line">    ...!</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print (strs)</span><br><span class="line">operation_write_file(&quot;aplanforme.txt&quot;,strs)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇文章用来记录python中读取和写入文件的方法以及一些系统模块的使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;相关知识&quot;&gt;&lt;a href=&quot;#相关知识&quot; class=&quot;headerlink&quot; title=&quot;相关知识&quot;&gt;&lt;/a&gt;相关知
      
    
    </summary>
    
    
      <category term="python" scheme="https://renxiaoyuan.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python每日进阶--使用sys和getopt输出从command获取的参数</title>
    <link href="https://renxiaoyuan.coding.me/Python%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BD%BF%E7%94%A8sys%E5%92%8Cgetopt%E8%BE%93%E5%87%BA%E4%BB%8Ecommand%E8%8E%B7%E5%8F%96%E7%9A%84%E5%8F%82%E6%95%B0.html"/>
    <id>https://renxiaoyuan.coding.me/Python每日进阶--使用sys和getopt输出从command获取的参数.html</id>
    <published>2018-12-15T04:56:26.967Z</published>
    <updated>2018-06-26T13:47:47.431Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章用来简单说明sys.argv和getopt的用法</p></blockquote><ol><li>getopt.getopt 方法<ul><li>getopt.getopt 方法用于解析命令行参数列表</li><li>语法格式：getopt.getopt(args, options[, long_options])</li><li>args: 要解析的命令行参数列表</li><li>options: 以字符串的格式定义，options后的冒号(:)表示该选项必须有附加的参数，不带冒号表示该选项不附加参数</li><li>long_options: 以列表的格式定义，long_options 后的等号(=)表示如果设置该选项，必须有附加的参数，否则就不附加参数</li></ul></li><li>getopt.GetoptError在没有找到参数列表，或选项的需要的参数为空时会触发该异常</li><li>sys.argv 是命令行参数列表,sys.argv[0] 表示脚本名</li><li>sys.exit()会引发一个异常：SystemExit，如果这个异常没有被捕获，那么python解释器将会退出。如果有捕获此异常的代码，那么这些代码还是会执行。捕获这个异常可以做一些额外的清理工作。0为正常退出，其他数值（1-127）为不正常，可抛异常事件供捕获<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">import sys, getopt</span><br><span class="line"></span><br><span class="line">def getArgs(argv):</span><br><span class="line"> try: </span><br><span class="line"> opts, args = getopt.getopt(argv, &quot;hg:d&quot;)</span><br><span class="line"> print(&quot;opt&apos;s type =&gt; &quot;, type(opts), opts)</span><br><span class="line"> print(&quot;args&apos;s type =&gt; &quot;, type(args), args)</span><br><span class="line"></span><br><span class="line"> for opt, arg in opts:</span><br><span class="line"> print(opt, arg)</span><br><span class="line"> except getopt.GetoptError: </span><br><span class="line"> sys.exit(2)</span><br><span class="line">getArgs(sys.argv[1:])</span><br><span class="line">print(sys.argv[0])</span><br><span class="line">print(sys.argv[1:])</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdn.net/20180525102732594?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇文章用来简单说明sys.argv和getopt的用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;getopt.getopt 方法&lt;ul&gt;
&lt;li&gt;getopt.getopt 方法用于解析命令行参数列表&lt;/li&gt;
&lt;li&gt;语法格式：g
      
    
    </summary>
    
    
      <category term="python" scheme="https://renxiaoyuan.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python每日进阶--使用os.walk()方法获取文件目录</title>
    <link href="https://renxiaoyuan.coding.me/Python%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BD%BF%E7%94%A8os.walk()%E6%96%B9%E6%B3%95%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.html"/>
    <id>https://renxiaoyuan.coding.me/Python每日进阶--使用os.walk()方法获取文件目录.html</id>
    <published>2018-12-15T04:56:26.964Z</published>
    <updated>2018-06-26T13:47:47.429Z</updated>
    
    <content type="html"><![CDATA[<p>罗列从某个文件夹下的某一类文件，可以使用通配符<code>*</code><br>        path：路径<br>        fun：处理函数<br>        suffix：匹配指定规则的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line"># 利用os.walk()方法遍历目录</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import fnmatch</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">path = &apos;../src&apos;</span><br><span class="line">for root, dirs, files in os.walk(path):</span><br><span class="line">for file in files:</span><br><span class="line">suffix = os.path.splitext(file)[1]</span><br><span class="line">if &apos;.py&apos; == suffix:</span><br><span class="line">filepath = os.path.join(root, file)</span><br><span class="line">print( filepath)</span><br><span class="line"></span><br><span class="line">def listFile(path, fun, suffix=&apos;*&apos;):</span><br><span class="line">for  root, dirs, files in os.walk(path):</span><br><span class="line">for file in files:</span><br><span class="line">if fnmatch.fnmatch(file, suffix):</span><br><span class="line">fun(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line">def  function(filepath):</span><br><span class="line">stime =time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(os.path.getmtime(filepath)))</span><br><span class="line">print(filepath+&apos;=&gt;&apos;+stime)</span><br><span class="line">listFile(&apos;../src/&apos;, function, &apos;*.py&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;罗列从某个文件夹下的某一类文件，可以使用通配符&lt;code&gt;*&lt;/code&gt;&lt;br&gt;        path：路径&lt;br&gt;        fun：处理函数&lt;br&gt;        suffix：匹配指定规则的文件&lt;br&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="python" scheme="https://renxiaoyuan.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python每日进阶--使用os.fork执行多线程</title>
    <link href="https://renxiaoyuan.coding.me/Python%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BD%BF%E7%94%A8os.fork%E6%89%A7%E8%A1%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"/>
    <id>https://renxiaoyuan.coding.me/Python每日进阶--使用os.fork执行多线程.html</id>
    <published>2018-12-15T04:56:26.961Z</published>
    <updated>2018-06-26T13:47:47.429Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import os, time</span><br><span class="line"></span><br><span class="line">print(&quot;before forking my pid &quot;, os.getpid())</span><br><span class="line">if os.fork():</span><br><span class="line">print(&quot;parent pid:&quot;, os.getpid())</span><br><span class="line">else:</span><br><span class="line">print(&quot;child pid: &quot;, os.getpid())</span><br><span class="line"></span><br><span class="line">time.sleep(2)</span><br><span class="line">print(&quot;fork is over&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="python" scheme="https://renxiaoyuan.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用supervisor自动重启node</title>
    <link href="https://renxiaoyuan.coding.me/node%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BD%BF%E7%94%A8supervisor%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AFnode.html"/>
    <id>https://renxiaoyuan.coding.me/node每日进阶--使用supervisor自动重启node.html</id>
    <published>2018-12-15T04:56:26.958Z</published>
    <updated>2018-06-26T13:47:47.435Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文中supervisor的安装和使用基于node和express项目</p></blockquote><p>node项目中更改文件后自动重启是非常重要的一步，而node本身必须手动重启，这种情况下就要使用工具了，常见的工具有<strong>supervisor</strong>，<strong>nodemon</strong>和<strong>pm2</strong>,今天介绍下<strong>supervisor</strong>的使用</p><h5 id="第一步：安装supervisor"><a href="#第一步：安装supervisor" class="headerlink" title="第一步：安装supervisor"></a>第一步：安装supervisor</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g supervisor</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180522142540948?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="第二步：启动应用"><a href="#第二步：启动应用" class="headerlink" title="第二步：启动应用"></a>第二步：启动应用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisor ./bin/www</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180522142555249?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="第三步：更改文件内容，查看是否正常重启"><a href="#第三步：更改文件内容，查看是否正常重启" class="headerlink" title="第三步：更改文件内容，查看是否正常重启"></a>第三步：更改文件内容，查看是否正常重启</h4><p><img src="https://img-blog.csdn.net/20180522142606582?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文中supervisor的安装和使用基于node和express项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;node项目中更改文件后自动重启是非常重要的一步，而node本身必须手动重启，这种情况下就要使用工具了，常见的工具有&lt;strong&gt;s
      
    
    </summary>
    
    
      <category term="node" scheme="https://renxiaoyuan.coding.me/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>git使用方法总结</title>
    <link href="https://renxiaoyuan.coding.me/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html"/>
    <id>https://renxiaoyuan.coding.me/git使用方法总结.html</id>
    <published>2018-12-15T04:56:26.955Z</published>
    <updated>2018-06-26T13:47:47.434Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文用来总结一次使用Git切换仓库的经验</p></blockquote><ol><li>查看远程仓库地址：<code>git remote show origin</code></li><li>切换远程仓库地址：<code>git remote set-url origin xxx(新的仓库地址)</code></li><li>获取最新代码：<code>git pull</code></li><li><p>如果不能获取代码并且提示：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=origin/&lt;branch&gt; master</span><br></pre></td></tr></table></figure><p> 则执行下面命令：<code>git branch --set-upstream-to=origin/当前分支名  远程分支名</code></p></li><li>如果还提示：<code>$ git pull fatal: refusing to merge unrelated histories</code>,则执行下面命令：<code>git pull origin master allow-unrelated-histories</code></li><li>然后再次更新代码：<code>git pull</code></li><li>如果提示代码冲突：<code>master | MERGING</code>,则执行回退命令：<code>git reset --merge</code>将代码恢复到更新代码之前</li><li>如果想回退某个历史版本，执行：<code>git checkout 版本号</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文用来总结一次使用Git切换仓库的经验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;查看远程仓库地址：&lt;code&gt;git remote show origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切换远程仓库地址：&lt;code&gt;git rem
      
    
    </summary>
    
    
      <category term="node" scheme="https://renxiaoyuan.coding.me/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>express中multer的使用</title>
    <link href="https://renxiaoyuan.coding.me/express%E4%B8%ADmulter%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://renxiaoyuan.coding.me/express中multer的使用.html</id>
    <published>2018-12-15T04:56:26.952Z</published>
    <updated>2018-06-26T13:47:47.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文用来总结在express中使用multer的经验</p></blockquote><h4 id="multer的介绍"><a href="#multer的介绍" class="headerlink" title="multer的介绍"></a>multer的介绍</h4><p>在使用express开发的过程中，前后端之间的交互基本上是通过HTTP实现的。在使用HTTP传输数据时，我们经常会遇到数据解析的问题，例如，前端使用axios发起一个post请求，请求的数据使用form-data的格式传给了后端，此时，后端就需要设置解析接受到的数据的格式，解析的方法也会因为后端开发语言的不同而有差别。今天我们要介绍的就是在使用express开发时，如何解析HTTP中传输过来的数据。在express的开发中，常用的解析工具有cookie-parser,body-parser和multer，其中multer就是用来解析传输的数据是form-data，x-www-form-urlencode和raw格式的请求。</p><h4 id="req获取传输数据的方法"><a href="#req获取传输数据的方法" class="headerlink" title="req获取传输数据的方法"></a>req获取传输数据的方法</h4><ol><li>req.query获取查询参数 /api/users?name=wwx</li><li>req.param获取pathinfo中参数 /api/users/{id}</li><li>req.body获取form提交参数</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文用来总结在express中使用multer的经验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;multer的介绍&quot;&gt;&lt;a href=&quot;#multer的介绍&quot; class=&quot;headerlink&quot; title=&quot;multer的介绍&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="node" scheme="https://renxiaoyuan.coding.me/tags/node/"/>
    
  </entry>
  
</feed>
