<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>破晓月圆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://webofrxy.github.io/"/>
  <updated>2018-05-26T08:08:51.501Z</updated>
  <id>https://webofrxy.github.io/</id>
  
  <author>
    <name>破晓月圆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于五年后人们生活状况的思考</title>
    <link href="https://webofrxy.github.io/%E5%85%B3%E4%BA%8E%E4%BA%94%E5%B9%B4%E5%90%8E%E7%94%9F%E6%B4%BB%E7%8A%B6%E5%86%B5%E7%9A%84%E6%80%9D%E8%80%83.html"/>
    <id>https://webofrxy.github.io/关于五年后生活状况的思考.html</id>
    <published>2018-05-26T06:54:27.809Z</published>
    <updated>2018-05-26T08:08:51.501Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先看下网友的观点："><a href="#首先看下网友的观点：" class="headerlink" title="首先看下网友的观点："></a>首先看下网友的观点：</h4><p>房价应该不会降，一线城市买房越来越困难！<br>看病应该会越贵，毕竟生命和健康始终重要！<br>教育投资会更多，家长都希望孩子好好学习！<br>贫富差距会更大，因为阶层之间越来越固化！<br>单身人数会增加，人的各方面压力都比较大！<br>老龄化问题严重，毕竟广场舞队伍逐渐庞大！<br>环保问题不好说，污染和雾霾不知是否好转！<br>税收应该会增加，因为政府的养老金问题多！<br>人口应该不增加，毕竟多养个孩子成本太大！<br>工作愈发不好找，智能机器人逐渐代替人力！</p><h4 id="再来谈下我的分析"><a href="#再来谈下我的分析" class="headerlink" title="再来谈下我的分析"></a>再来谈下我的分析</h4><ol><li>一线城市房价降低的可能性几乎为零，如果想要你的孩子不被社会抛弃，那你就需要提前关注准一线甚至心仪的二线城市的房子。五年前房价没跌，五年后房价也不会跌。</li><li>五年后智能设备会再次升级，只能设备逐渐普及到生活的细节处，例如，房屋的门锁，冰箱，洗衣机，电视的智能化程度会越来越高。AI和AR在生活中会更加普及，手机等智能设备会变的更加<br>便携，掌握核心技术的公司对于社会的影响会越来越大，就像头号玩家那样。</li><li>五年后国家对于互联网内容的控制会越来越全面，正能量的内容会越来越多，原创内容的价值会越来越高，中国的媒体盈利模式会像美国的大型杂志社靠近，<br>人们对于知识付费的接受程度也会变高，各种网上的订阅杂志会逐渐普及。人们对于学习型，专业型的网站需求会增长，网页的阅读效果会和APP体验效果相似，在5G和pwa技术的推动下，web将会逐渐<br>取代APP成为人们浏览和购物的首选。</li><li>以语音技术为主打的微信将会被以视频技术为主打的社交类APP取代，人们的沟通方式将会从发送语音变为发送视频，购物类的网站将会以视频为商品的主要推荐方式，用户购物体验将会变的更好，<br>个性化导购会借助AR技术实现，人们可以通过各种智能设备上的摄像头实现上网购物和社交，不需要再拿着手机在房间里走来走去了。所以你未来的定位应该是一名具有五到十年经验的服饰搭配设计师，你可以借助AR，AI和大数据为顾客提供个性化的服装建议，你的网站可以提供上千种不同的服装搭配和品牌推荐，你可以让顾客通过AR技术实时看到自己的装扮，并提供付费的VIP咨询服务。</li><li>未来的阶层固化会让财富逐渐集中到中产阶级以上，就像《饥饿游戏》中展现的那样，社会底层使用着高科技的产品，却被掌握高科技的公司剥削着。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先看下网友的观点：&quot;&gt;&lt;a href=&quot;#首先看下网友的观点：&quot; class=&quot;headerlink&quot; title=&quot;首先看下网友的观点：&quot;&gt;&lt;/a&gt;首先看下网友的观点：&lt;/h4&gt;&lt;p&gt;房价应该不会降，一线城市买房越来越困难！&lt;br&gt;看病应该会越贵，毕竟生命和健
      
    
    </summary>
    
    
      <category term="生活" scheme="https://webofrxy.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python每日进阶--使用os.fork执行多线程</title>
    <link href="https://webofrxy.github.io/Python%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BD%BF%E7%94%A8os.fork%E6%89%A7%E8%A1%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"/>
    <id>https://webofrxy.github.io/Python每日进阶--使用os.fork执行多线程.html</id>
    <published>2018-05-26T02:33:20.064Z</published>
    <updated>2018-05-26T02:36:01.787Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import os, time</span><br><span class="line"></span><br><span class="line">print(&quot;before forking my pid &quot;, os.getpid())</span><br><span class="line">if os.fork():</span><br><span class="line">print(&quot;parent pid:&quot;, os.getpid())</span><br><span class="line">else:</span><br><span class="line">print(&quot;child pid: &quot;, os.getpid())</span><br><span class="line"></span><br><span class="line">time.sleep(2)</span><br><span class="line">print(&quot;fork is over&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="python" scheme="https://webofrxy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python每日进阶--使用sys和getopt输出从command获取的参数</title>
    <link href="https://webofrxy.github.io/Python%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BD%BF%E7%94%A8sys%E5%92%8Cgetopt%E8%BE%93%E5%87%BA%E4%BB%8Ecommand%E8%8E%B7%E5%8F%96%E7%9A%84%E5%8F%82%E6%95%B0.html"/>
    <id>https://webofrxy.github.io/Python每日进阶--使用sys和getopt输出从command获取的参数.html</id>
    <published>2018-05-25T02:44:07.276Z</published>
    <updated>2018-05-25T02:54:45.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章用来简单说明sys.argv和getopt的用法</p></blockquote><ol><li>getopt.getopt 方法<ul><li>getopt.getopt 方法用于解析命令行参数列表</li><li>语法格式：getopt.getopt(args, options[, long_options])</li><li>args: 要解析的命令行参数列表</li><li>options: 以字符串的格式定义，options后的冒号(:)表示该选项必须有附加的参数，不带冒号表示该选项不附加参数</li><li>long_options: 以列表的格式定义，long_options 后的等号(=)表示如果设置该选项，必须有附加的参数，否则就不附加参数</li></ul></li><li>getopt.GetoptError在没有找到参数列表，或选项的需要的参数为空时会触发该异常</li><li>sys.argv 是命令行参数列表,sys.argv[0] 表示脚本名</li><li>sys.exit()会引发一个异常：SystemExit，如果这个异常没有被捕获，那么python解释器将会退出。如果有捕获此异常的代码，那么这些代码还是会执行。捕获这个异常可以做一些额外的清理工作。0为正常退出，其他数值（1-127）为不正常，可抛异常事件供捕获<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">import sys, getopt</span><br><span class="line"></span><br><span class="line">def getArgs(argv):</span><br><span class="line"> try: </span><br><span class="line"> opts, args = getopt.getopt(argv, &quot;hg:d&quot;)</span><br><span class="line"> print(&quot;opt&apos;s type =&gt; &quot;, type(opts), opts)</span><br><span class="line"> print(&quot;args&apos;s type =&gt; &quot;, type(args), args)</span><br><span class="line"></span><br><span class="line"> for opt, arg in opts:</span><br><span class="line"> print(opt, arg)</span><br><span class="line"> except getopt.GetoptError: </span><br><span class="line"> sys.exit(2)</span><br><span class="line">getArgs(sys.argv[1:])</span><br><span class="line">print(sys.argv[0])</span><br><span class="line">print(sys.argv[1:])</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdn.net/20180525102732594?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇文章用来简单说明sys.argv和getopt的用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;getopt.getopt 方法&lt;ul&gt;
&lt;li&gt;getopt.getopt 方法用于解析命令行参数列表&lt;/li&gt;
&lt;li&gt;语法格式：g
      
    
    </summary>
    
    
      <category term="python" scheme="https://webofrxy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>tpshop每日进阶--了解tp5应用架构</title>
    <link href="https://webofrxy.github.io/tpshop%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BA%86%E8%A7%A3%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84.html"/>
    <id>https://webofrxy.github.io/tpshop每日进阶--了解应用架构.html</id>
    <published>2018-05-24T14:58:58.586Z</published>
    <updated>2018-05-26T02:36:06.476Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="php" scheme="https://webofrxy.github.io/tags/php/"/>
    
      <category term="thinkphp" scheme="https://webofrxy.github.io/tags/thinkphp/"/>
    
      <category term="架构" scheme="https://webofrxy.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>如何学习</title>
    <link href="https://webofrxy.github.io/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%EF%BC%9F.html"/>
    <id>https://webofrxy.github.io/如何学习？.html</id>
    <published>2018-05-24T08:20:40.238Z</published>
    <updated>2018-05-24T14:57:50.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为一名前端如何有计划的提升自己的技术水平呢？</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作为一名前端如何有计划的提升自己的技术水平呢？&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="学习" scheme="https://webofrxy.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="技术" scheme="https://webofrxy.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python每日进阶--使用os.walk()方法获取文件目录</title>
    <link href="https://webofrxy.github.io/Python%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BD%BF%E7%94%A8os.walk()%E6%96%B9%E6%B3%95%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.html"/>
    <id>https://webofrxy.github.io/Python每日进阶--使用os.walk()方法获取文件目录.html</id>
    <published>2018-05-24T02:56:05.712Z</published>
    <updated>2018-05-24T02:57:00.270Z</updated>
    
    <content type="html"><![CDATA[<p>罗列从某个文件夹下的某一类文件，可以使用通配符<code>*</code><br>        path：路径<br>        fun：处理函数<br>        suffix：匹配指定规则的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line"># 利用os.walk()方法遍历目录</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import fnmatch</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">path = &apos;../src&apos;</span><br><span class="line">for root, dirs, files in os.walk(path):</span><br><span class="line">for file in files:</span><br><span class="line">suffix = os.path.splitext(file)[1]</span><br><span class="line">if &apos;.py&apos; == suffix:</span><br><span class="line">filepath = os.path.join(root, file)</span><br><span class="line">print( filepath)</span><br><span class="line"></span><br><span class="line">def listFile(path, fun, suffix=&apos;*&apos;):</span><br><span class="line">for  root, dirs, files in os.walk(path):</span><br><span class="line">for file in files:</span><br><span class="line">if fnmatch.fnmatch(file, suffix):</span><br><span class="line">fun(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line">def  function(filepath):</span><br><span class="line">stime =time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(os.path.getmtime(filepath)))</span><br><span class="line">print(filepath+&apos;=&gt;&apos;+stime)</span><br><span class="line">listFile(&apos;../src/&apos;, function, &apos;*.py&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;罗列从某个文件夹下的某一类文件，可以使用通配符&lt;code&gt;*&lt;/code&gt;&lt;br&gt;        path：路径&lt;br&gt;        fun：处理函数&lt;br&gt;        suffix：匹配指定规则的文件&lt;br&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="python" scheme="https://webofrxy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用supervisor自动重启node</title>
    <link href="https://webofrxy.github.io/node%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E4%BD%BF%E7%94%A8supervisor%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AFnode.html"/>
    <id>https://webofrxy.github.io/node每日进阶--使用supervisor自动重启node.html</id>
    <published>2018-05-23T05:59:40.077Z</published>
    <updated>2018-05-23T06:29:43.685Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文中supervisor的安装和使用基于node和express项目</p></blockquote><p>node项目中更改文件后自动重启是非常重要的一步，而node本身必须手动重启，这种情况下就要使用工具了，常见的工具有<strong>supervisor</strong>，<strong>nodemon</strong>和<strong>pm2</strong>,今天介绍下<strong>supervisor</strong>的使用</p><h5 id="第一步：安装supervisor"><a href="#第一步：安装supervisor" class="headerlink" title="第一步：安装supervisor"></a>第一步：安装supervisor</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g supervisor</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180522142540948?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h5 id="第二步：启动应用"><a href="#第二步：启动应用" class="headerlink" title="第二步：启动应用"></a>第二步：启动应用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisor ./bin/www</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180522142555249?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h4 id="第三步：更改文件内容，查看是否正常重启"><a href="#第三步：更改文件内容，查看是否正常重启" class="headerlink" title="第三步：更改文件内容，查看是否正常重启"></a>第三步：更改文件内容，查看是否正常重启</h4><p><img src="https://img-blog.csdn.net/20180522142606582?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlYm9mcnh5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文中supervisor的安装和使用基于node和express项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;node项目中更改文件后自动重启是非常重要的一步，而node本身必须手动重启，这种情况下就要使用工具了，常见的工具有&lt;strong&gt;s
      
    
    </summary>
    
    
      <category term="node" scheme="https://webofrxy.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Python每日进阶--读取和写入文件</title>
    <link href="https://webofrxy.github.io/Python%E6%AF%8F%E6%97%A5%E8%BF%9B%E9%98%B6--%E8%AF%BB%E5%8F%96%E5%92%8C%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6.html"/>
    <id>https://webofrxy.github.io/Python每日进阶--读取和写入文件.html</id>
    <published>2018-05-23T05:49:47.006Z</published>
    <updated>2018-05-24T01:42:27.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章用来记录python中读取和写入文件的方法以及一些系统模块的使用</p></blockquote><h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><ol><li>sys模块是python程序用来请求解释器行为的接口,sys.argv: 实现从程序外部向程序传递参数</li><li>os模块提供了一种方便的使用操作系统函数的方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!coding:UTF-8</span><br><span class="line">import sys</span><br><span class="line">def operation_file(file_name):</span><br><span class="line">try:</span><br><span class="line">h_file = open(file_name)</span><br><span class="line">try:</span><br><span class="line">readlines = h_file.readlines();</span><br><span class="line">print(readlines)</span><br><span class="line">finally:</span><br><span class="line">h_file.close()</span><br><span class="line">except IOError:</span><br><span class="line">print(&quot;IOError&quot;)</span><br><span class="line">def operation_write_file(file_name, strs):</span><br><span class="line">try:</span><br><span class="line">h_file = open(file_name, &apos;w&apos;, 1)</span><br><span class="line">try: </span><br><span class="line">h_file.write(strs)</span><br><span class="line">finally:</span><br><span class="line">h_file.close()</span><br><span class="line">except IOError:</span><br><span class="line">print(&quot;IOError&quot;)</span><br><span class="line">if len(sys.argv) != 2:</span><br><span class="line">print(&quot;usage:*.py path/file_name&quot;)</span><br><span class="line">else: </span><br><span class="line">operation_file(sys.argv[1])</span><br><span class="line">print (&quot;write file:&quot;)</span><br><span class="line">strs =&quot;&quot;&quot;</span><br><span class="line">    All that city!you just couldn&apos;t see an end to it.</span><br><span class="line">    The end? please? can you please just show me where is ends?</span><br><span class="line">    ...</span><br><span class="line">    One woman,onw house,one piece of land to call your own</span><br><span class="line">    One landscape to look at,on way to die!</span><br><span class="line">    All that world just weighing down on you.</span><br><span class="line">    You don&apos;t even know where it comes to and end.</span><br><span class="line">    ...!</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print (strs)</span><br><span class="line">operation_write_file(&quot;aplanforme.txt&quot;,strs)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇文章用来记录python中读取和写入文件的方法以及一些系统模块的使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;相关知识&quot;&gt;&lt;a href=&quot;#相关知识&quot; class=&quot;headerlink&quot; title=&quot;相关知识&quot;&gt;&lt;/a&gt;相关知
      
    
    </summary>
    
    
      <category term="python" scheme="https://webofrxy.github.io/tags/python/"/>
    
  </entry>
  
</feed>
